AWSTemplateFormatVersion: '2010-09-09'
Description: This stack creates ECS cluster with service discovery using private DNS
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC in which Fargate container tasks run
  PublicSubnetList:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at least two public subnets in given VPC to deploy ALB
  PrivateSubnetList:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at least two private subnets in given VPC where Fargate run tasks
Resources:
  # Load balancer security group
  DiscoveryLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: DISCOVERY-LOAD-BALANCER-SG
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        # Allow access to ALB from anywhere on the internet
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
          Description: Allow HTTP
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6: '::/0'
          Description: Allow HTTP
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
          Description: Allow HTTPS
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIpv6: '::/0'
          Description: Allow HTTPS
  # Container security group
  DiscoveryContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: DISCOVERY-WELCOME-CONTAINER-SG
      GroupDescription: Access to the welcome container
      VpcId: !Ref VpcId
  # Allow traffic from load balancer into container
  DiscoveryContainerSGIngressFromALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public Load balancer
      GroupId: !Ref 'DiscoveryContainerSecurityGroup'
      IpProtocol: tcp
      FromPort: 8000
      ToPort: 8001
      SourceSecurityGroupId: !Ref 'DiscoveryLoadBalancerSG'
  # Allow traffic from one container into another, so that welcome service can reach message service using service discovery DNS URL
  DiscoveryContainerSGIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'DiscoveryContainerSecurityGroup'
      IpProtocol: tcp
      FromPort: 8000
      ToPort: 8000
      SourceSecurityGroupId: !Ref 'DiscoveryContainerSecurityGroup'

  # Application load balancer for getting traffic to containers
  DiscoveryAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: APP-DISCOVERY-ALB
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '60'
      Subnets: !Ref PublicSubnetList
      SecurityGroups: [!Ref 'DiscoveryLoadBalancerSG']
  # This target group is used to setup the ALB to just drop traffic initially, before any real service target groups have been added
  DiscoveryAppLoadBalancerDummyTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: APP-DISCOVERY-TestDUMMY-TG
      HealthCheckIntervalSeconds: 150
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 120
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId
  DiscoveryAppLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
    - DiscoveryAppLoadBalancer
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref 'DiscoveryAppLoadBalancerDummyTG'
        Type: 'forward'
      LoadBalancerArn: !Ref 'DiscoveryAppLoadBalancer'
      Port: 80
      Protocol: HTTP
  # When welcome container comes up, it will register in this target group
  DiscoveryWelcomeTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: DISCOVERY-WELCOME-TG
      HealthCheckIntervalSeconds: 150
      HealthCheckPath: /actuator/health
      HealthCheckPort: 8001
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 120
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: ip
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VpcId
  DiscoveryWelcomeLoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - TargetGroupArn: !Ref 'DiscoveryWelcomeTargetGroup'
        Type: 'forward'
      Conditions:
      - Field: path-pattern
        Values: ['/api/v1/welcome/**']
      ListenerArn: !Ref DiscoveryAppLoadBalancerListener
      Priority: 3 
  # When message container comes up, it will register in this target group
  DiscoveryMessageTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: DISCOVERY-MESSAGE-TG
      HealthCheckIntervalSeconds: 150
      HealthCheckPath: /actuator/health
      HealthCheckPort: 8001
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 120
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: ip
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VpcId
  DiscoveryMessageLoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - TargetGroupArn: !Ref 'DiscoveryMessageTargetGroup'
        Type: 'forward'
      Conditions:
      - Field: path-pattern
        Values: ['/api/v1/message/**']
      ListenerArn: !Ref DiscoveryAppLoadBalancerListener
      Priority: 1
  # When random container comes up, it will register in this target group
  DiscoveryRandomTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: DISCOVERY-RANDOM-TG
      HealthCheckIntervalSeconds: 150
      HealthCheckPath: /actuator/health
      HealthCheckPort: 8001
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 120
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: ip
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VpcId
  DiscoveryRandomLoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - TargetGroupArn: !Ref 'DiscoveryRandomTargetGroup'
        Type: 'forward'
      Conditions:
      - Field: path-pattern
        Values: ['/api/v1/random/**']
      ListenerArn: !Ref DiscoveryAppLoadBalancerListener
      Priority: 2
  # When swagger container comes up, it will register in this target group
  DiscoverySwaggerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: DISCOVERY-SWAGGER-TG
      HealthCheckIntervalSeconds: 150
      HealthCheckPath: /actuator/health
      HealthCheckPort: 8001
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 120
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: ip
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VpcId
  DiscoverySwaggerLoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - TargetGroupArn: !Ref 'DiscoverySwaggerTargetGroup'
        Type: 'forward'
      Conditions:
      - Field: path-pattern
        Values: ['/api/v1/**']
      ListenerArn: !Ref DiscoveryAppLoadBalancerListener
      Priority: 4
  # This is an IAM role which authorizes ECS to manage resources on the account, such as updating load balancer
  # with details of where containers are, so that traffic can reach containers.
  DiscoveryECSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DISCOVERY-ECS-ROLE
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ECSRolePolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Rules which allow ECS to attach network interfaces to instances in order
              # for awsvpc networking mode to work right
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'

              # Rules which allow ECS to update load balancers with the information about
              # how to send traffic to containers
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'

              - 'ec2:Describe*'
              - 'ec2:AuthorizeSecurityGroupIngress'
            Resource: '*'

  # This is a role which is used by the ECS tasks themselves.
  DiscoveryECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DISCOVERY-ECS-TASK-EXEC-ROLE
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ECSTaskExecutionRolePolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Allow the ECS Tasks to download images from ECR
              - 'ecr:GetAuthorizationToken'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:BatchGetImage'

              # Allow the ECS tasks to upload logs to CloudWatch
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: '*'

  # IAM role to give the service's containers if the code within needs to access other AWS resources
  # like ECS tasks, S3 buckets etc
  DiscoveryECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DISCOVERY-ECS-TASK-ROLE
      AssumeRolePolicyDocument:
        Statement:
        - Effect: 'Allow'
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Policies:
      - PolicyName: ECSServiceDiscovery
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Allow ECS container to access ECS tasks
              - 'ecs:ListTasks'
              - 'ecs:DescribeTasks'
            Resource: '*'

  # Service Discovery POC ECS Cluster
  DiscoveryECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: SERVICE-DISCOVERY-ECS-CLUSTER

  # Cloud watch log group to which welcome container send logs
  DiscoveryWelcomeLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ECS/discovery/welcome'
      RetentionInDays: 7
  # Cloud watch log group to which message container send logs
  DiscoveryMessageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ECS/discovery/message'
      RetentionInDays: 7
  # Cloud watch log group to which random container send logs
  DiscoveryRandomLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ECS/discovery/random'
      RetentionInDays: 7
  # Cloud watch log group to which message container send logs
  DiscoverySwaggerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ECS/discovery/swagger'
      RetentionInDays: 7
  # Private namespace for services
  DiscoveryPrivateNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: my-discovery-domain
      Vpc: !Ref VpcId

  # Service discovery for message service, DnsConfig property specifies the DNS records that are automatically created
  # in Amazon Route 53 when your Amazon ECS task is registered with the service discovery service
  MessageDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Description: Discovery Service for the message service
      Name: discovery-message-service
      NamespaceId: !Ref DiscoveryPrivateNamespace
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
          - TTL: 60
            Type: SRV
      HealthCheckCustomConfig:
        FailureThreshold: 1
  # Metadata description of what message container to run and what resource requirements it has
  DiscoveryMessageTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: DISCOVERY-MESSAGE-TD
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      ExecutionRoleArn: !Ref DiscoveryECSTaskExecutionRole
      TaskRoleArn: !Ref DiscoveryECSTaskRole
      ContainerDefinitions:
      - Name: DISCOVERY-MESSAGE-CONTAINER
        Cpu: 512
        Memory: 1024
        Image: '734334009528.dkr.ecr.us-east-1.amazonaws.com/arun/aws-service-discovery-message:1.0-SNAPSHOT'
        PortMappings:
        - ContainerPort: 8000
        - ContainerPort: 8001
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref DiscoveryMessageLogGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: ecs
  # Service is a resource which allows to run multiple copies of a type of task, and gather up their logs and metrics,
  # as well as monitor the number of running tasks and replace any that have crashed
  DiscoveryMessageECSService:
    Type: AWS::ECS::Service
    DependsOn: DiscoveryMessageLoadBalancerRule
    Properties:
      ServiceName: DISCOVERY-MESSAGE-SERVICE
      Cluster: !Ref DiscoveryECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
          - !Ref DiscoveryContainerSecurityGroup
          Subnets: !Ref PrivateSubnetList
      TaskDefinition: !Ref DiscoveryMessageTaskDefinition
      LoadBalancers:
      - ContainerName: DISCOVERY-MESSAGE-CONTAINER
        ContainerPort: 8000
        TargetGroupArn: !Ref DiscoveryMessageTargetGroup
      ServiceRegistries:
      - RegistryArn: !GetAtt MessageDiscoveryService.Arn
        Port: 8000

  # Service discovery for random service, DnsConfig property specifies the DNS records that are automatically created
  # in Amazon Route 53 when your Amazon ECS task is registered with the service discovery service
  RandomDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Description: Discovery Service for the random service
      Name: discovery-random-service
      NamespaceId: !Ref DiscoveryPrivateNamespace
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
          - TTL: 60
            Type: SRV
      HealthCheckCustomConfig:
        FailureThreshold: 1
  # Metadata description of what message container to run and what resource requirements it has
  DiscoveryRandomTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: DISCOVERY-RANDOM-TD
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      ExecutionRoleArn: !Ref DiscoveryECSTaskExecutionRole
      TaskRoleArn: !Ref DiscoveryECSTaskRole
      ContainerDefinitions:
      - Name: DISCOVERY-RANDOM-CONTAINER
        Cpu: 512
        Memory: 1024
        Image: '734334009528.dkr.ecr.us-east-1.amazonaws.com/arun/aws-service-discovery-random:1.0-SNAPSHOT'
        PortMappings:
        - ContainerPort: 8000
        - ContainerPort: 8001
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref DiscoveryRandomLogGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: ecs
  # Service is a resource which allows to run multiple copies of a type of task, and gather up their logs and metrics,
  # as well as monitor the number of running tasks and replace any that have crashed
  DiscoveryRandomECSService:
    Type: AWS::ECS::Service
    DependsOn: DiscoveryRandomLoadBalancerRule
    Properties:
      ServiceName: DISCOVERY-RANDOM-SERVICE
      Cluster: !Ref DiscoveryECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
          - !Ref DiscoveryContainerSecurityGroup
          Subnets: !Ref PrivateSubnetList
      TaskDefinition: !Ref DiscoveryRandomTaskDefinition
      LoadBalancers:
      - ContainerName: DISCOVERY-RANDOM-CONTAINER
        ContainerPort: 8000
        TargetGroupArn: !Ref DiscoveryRandomTargetGroup
      ServiceRegistries:
      - RegistryArn: !GetAtt RandomDiscoveryService.Arn
        Port: 8000
  # Metadata description of what swagger container to run and what resource requirements it has
  DiscoverySwaggerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: Discovery-Swagger-TD
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      ExecutionRoleArn: !Ref DiscoveryECSTaskExecutionRole
      TaskRoleArn: !Ref DiscoveryECSTaskRole
      ContainerDefinitions:
      - Name: DISCOVERY-SWAGGER-CONTAINER
        Cpu: 512
        Memory: 1024
        Image: '734334009528.dkr.ecr.us-east-1.amazonaws.com/arun/aws-service-discovery-swagger:1.0-SNAPSHOT'
        PortMappings:
        - ContainerPort: 8000
        - ContainerPort: 8001
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref DiscoverySwaggerLogGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: ecs
  # Service is a resource which allows to run multiple copies of a type of task, and gather up their logs and metrics,
  # as well as monitor the number of running tasks and replace any that have crashed
  DiscoverySwaggerECSService:
    Type: AWS::ECS::Service
    DependsOn: DiscoverySwaggerLoadBalancerRule
    Properties:
      ServiceName: DISCOVERY-SWAGGER-SERVICE
      Cluster: !Ref DiscoveryECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
          - !Ref DiscoveryContainerSecurityGroup
          Subnets: !Ref PrivateSubnetList
      TaskDefinition: !Ref DiscoverySwaggerTaskDefinition
      LoadBalancers:
      - ContainerName: DISCOVERY-SWAGGER-CONTAINER
        ContainerPort: 8000
        TargetGroupArn: !Ref DiscoverySwaggerTargetGroup
  # Metadata description of what welcome container to run and what resource requirements it has
  DiscoveryWelcomeTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: DISCOVERY-WELCOME-TD
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      ExecutionRoleArn: !Ref DiscoveryECSTaskExecutionRole
      TaskRoleArn: !Ref DiscoveryECSTaskRole
      ContainerDefinitions:
      - Name: DISCOVERY-WELCOME-CONTAINER
        Cpu: 512
        Memory: 1024
        Image: '734334009528.dkr.ecr.us-east-1.amazonaws.com/arun/aws-service-discovery-welcome:1.0-SNAPSHOT'
        PortMappings:
        - ContainerPort: 8000
        - ContainerPort: 8001
        Environment:
        - Name: MESSAGE_SERVICE_URL
          Value: http://discovery-message-service.my-discovery-domain:8000/api/v1/message
        - Name: RANDOM_SERVICE_URL
          Value: http://discovery-random-service.my-discovery-domain:8000/api/v1/random
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref DiscoveryWelcomeLogGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: ecs
  # Service is a resource which allows to run multiple copies of a type of task, and gather up their logs and metrics,
  # as well as monitor the number of running tasks and replace any that have crashed
  DiscoveryWelcomeECSService:
    Type: AWS::ECS::Service
    DependsOn: DiscoveryWelcomeLoadBalancerRule
    Properties:
      ServiceName: DISCOVERY-WELCOME-SERVICE
      Cluster: !Ref DiscoveryECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
          - !Ref DiscoveryContainerSecurityGroup
          Subnets: !Ref PrivateSubnetList
      TaskDefinition: !Ref DiscoveryWelcomeTaskDefinition
      LoadBalancers:
      - ContainerName: DISCOVERY-WELCOME-CONTAINER
        ContainerPort: 8000
        TargetGroupArn: !Ref DiscoveryWelcomeTargetGroup